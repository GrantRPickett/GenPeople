import random
import sys
import numpy as np
from random import choice
from random import sample
from numpy import genfromtxt
from numpy.random import random_sample

class Traits():
    def __init__(self, traits_hash, location):
        # stores the traits hash for removing of things and such
        self.traits_hash = traits_hash
        
        self.born_text = ""
        born_trait = ""
        # BORN = "I was born in (year) to a (commoner, knightly, lordly, merchant) family."  
        # BORN_TRAIT = (1/4): "When I was born it was noticed that I was remarkably (physical trait)."

        physical = []
        psychological = []
        social = []
        self.trait_dict = {}
        self.trait_list = []
        
        # generate inital physical traits (up to 4 at birth)
        for i in range (1, 10):
            trait = self.generate_trait("physical", traits_hash["physical"])
            physical.append(trait)
            trait["type"] = "physical"
            self.trait_list.append(trait)

        # generate inital psycholgical traits (up to 4 at birth)
        for i in range (1, 10):
            trait = self.generate_trait("psychological", traits_hash["psychological"])
            psychological.append(trait)
            trait["type"] = "psychological"
            self.trait_list.append(trait)

        # generate 1 social class
        trait = self.generate_trait("social", traits_hash["social"])
        social.append(trait)
        trait["type"] = "social"
        self.trait_list.append(trait)

        self.trait_dict["physical"] = physical
        self.trait_dict["psychological"] = psychological
        self.trait_dict["social"] = social
    
        # the professional and hobby traits are generated by events exclusively
        self.trait_dict["professional"] = []

    def weighted_values(self, values, probabilities, size):
        bins = np.add.accumulate(probabilities)
        return values[np.digitize(random_sample(size), bins)]
    
    # just the value right now
    def generate_trait(self, type, traits_and_percents):
        #for non normal distribution of traits
        values = np.array(traits_and_percents["value"])
        probabilities = np.array(traits_and_percents["probability"])
        trait = {}
        trait["value"] = self.weighted_values(values, probabilities, 1)[0]
        
        index = traits_and_percents["value"].index(trait["value"])
        trait["description"] = traits_and_percents["description"][index]
        trait["level"] = traits_and_percents["level"][index]
            
        #for the random choice
        #trait = choice(traits_and_percents["value"])
        #figure out how to correctly remove traits
        #self.traits_hash[choice]["value"].remove(trait)
    
        return trait
    
    def get_traits_dict(self):
        return self.trait_dict
    
    def get_traits_list(self):
        return self.trait_list

        